/**
 * ### **문제 설명**

첫 번째 분수의 분자와 분모를 뜻하는 `numer1`, `denom1`, 두 번째 분수의 분자와 분모를 뜻하는 `numer2`, `denom2`가 매개변수로 주어집니다. 두 분수를 더한 값을 기약 분수로 나타냈을 때 분자와 분모를 순서대로 담은 배열을 return 하도록 solution 함수를 완성해보세요.

---

### 제한사항

- 0 <`numer1`, `denom1`, `numer2`, `denom2` < 1,000

---

### 입출력 예

| numer1 | denom1 | numer2 | denom2 | result |
| --- | --- | --- | --- | --- |
| 1 | 2 | 3 | 4 | [5, 4] |
| 9 | 2 | 1 | 3 | [29, 6] |

---

### 입출력 예 설명

입출력 예 #1

- 1 / 2 + 3 / 4 = 5 / 4입니다. 따라서 [5, 4]를 return 합니다.

입출력 예 #2

- 9 / 2 + 1 / 3 = 29 / 6입니다. 따라서 [29, 6]을 return 합니다.
 */

function solution(denom1, numer1, denom2, numer2) {
  // 분자 구하기
  let dem = denom1 * numer2 + denom2 * numer1;
  // 분모 구하기
  let num = numer1 * numer2;
  // 최대 공약수 구하기
  const gcd = (dem, num) => (dem % num === 0 ? num : gcd(num, dem % num));
  let g = gcd(dem, num);
  return [dem / g, num / g];
}

/**
 * 
 * 예시) solution(1,2,3,4) 가 있다고 하면 분모는 2와 4, 분자는 2와 3 입니다.

분자를 구하기 위해 분모를 공통적인 숫자로 만들어 줍니다. 이를 위해 두 숫자를 곱합니다. =  numer1 * numer2

이에 따라 각 분자들도 분모가 곱해진 값에 맞춰 값을 곱해줍니다. 

예시) denom1*numer2 + denom2*numer1 = 1*4 + 3*2 

이제 최대공약수를 구하기 위해 함수를 하나 만들고(이때 만든 변수는 gcd입니다.) 매개변수로 분자와 분모를 불러옵니다. 분자와 분모를 나누었을 때 나누어진다면(이때 사용되는 연산자는 % 입니다. % 연산자는 값을 나눈 후 몫을 받아오는 연잔사이므로 이때 dem % num = 0이라면 두 수는 나누어진다는 뜻입니다.)   num이 최대공약수입니다. 

나누어지지 않는다면 gcd의 매개변수로 num과 dem % num 을 넣어서 다시 나눕니다. 

= gcd(num, dem % num)

나누어질 때까지 위 함수를 반복합니다.

이제 최대 공약수를 분자와 분모에 나누고 배열에 넣기 위해 변수를 만들어 gcd 함수를 대입해줍니다.

이제 리턴에 배열로 dem/g, num/g 가 들어가면 문제가 해결됩니다.
 */
